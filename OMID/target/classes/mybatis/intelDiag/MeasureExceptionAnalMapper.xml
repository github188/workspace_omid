<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nari.intelDiag.mapper.MeasureExceptionAnalMapper">

  <cache />
  <select id="queryAlarmAnalyseInfo" useCache="false"  parameterType="string" resultType="hashmap">
  			SELECT A.ALARM_ID,
  			   A.ALARM_CODE,
		       VW.EVENT_NAME,
		       A.ORG_NO,
		       A.AREA_CODE,
		       PO.ORG_NAME P_ORG_NAME,
		       O.ORG_NAME,
		       A.CONS_NO,
		       C.CONS_NAME,
		       C.CONS_TYPE,
		       C.RUN_CAP,
		       TT.CONS_TYPE_NAME,
		       DECODE(A.EVENT_LEVEL,'01','严重','02','重要','03','较重要','04','一般','') EVENT_LEVEL,
		       DECODE(A.ALARM_SRC,'1','主站分析','2','终端上送事件','3','人工录入','') ALARM_SRC,
		       TO_CHAR(A.FIRST_ALARM_DATE,'yyyy-mm-dd') FIRST_ALARM_DATE,
		       TO_CHAR(A.ALARM_DATE,'yyyy-mm-dd') ALARM_DATE,
		       A.ALARM_CNT,
		       TO_CHAR(A.FIRST_RESUME_DATE,'yyyy-mm-dd') FIRST_RESUME_DATE,
		       TO_CHAR(A.RESUME_DATE,'yyyy-mm-dd') RESUME_DATE,
		       A.SAVE_ALARM_DATE,
		       A.RESUME_DAY_CNT,
		       R.TERMINAL_ADDR,
		       A.METER_ID,
		       D.ASSET_NO,
		       A.REMARK,
		       A.TERMINAL_ID
		  FROM A_ALARM_ANALYSE   A,
		       VW_SEA_ALARM_CODE VW,
		       SEA_C_CONS        C,
		       SEA.VW_CONS_TYPE  TT,
		       SEA_R_TMNL_RUN    R,
		       SEA_O_ORG         O,
		       SEA_O_ORG         PO,
		       SEA_D_METER       D
	WHERE A.ALARM_TYPE = #{map.alarmType}
		   AND A.ALARM_CODE = VW.EVENT_NO
		   AND A.CONS_NO = C.CONS_NO(+)
		   AND C.CONS_TYPE = TT.CONS_TYPE(+)
		   AND A.TERMINAL_ID = R.TERMINAL_ID(+)
		   AND A.ORG_NO = O.ORG_NO(+)
		   AND PO.ORG_NO = O.P_ORG_NO
		   AND A.METER_ID = D.METER_ID(+) 
		   AND A.FLOW_STATUS_CODE = #{map.flowStatusCode}
		   <if test="map.consType!='' and map.consType!='-1'" >
		   AND tt.cons_type=#{map.consType}
		   </if>
		<if test="map.alarmCode != null and map.alarmCode !='' ">
   			AND A.ALARM_CODE= #{map.alarmCode}
   		</if>   
        <if test="map.orgNo != null and map.orgNo !='' ">
   			AND A.ORG_NO IN
		        (SELECT ORG_NO
		           FROM SEA_O_ORG
		         CONNECT BY PRIOR ORG_NO = P_ORG_NO
		          START WITH ORG_NO = #{map.orgNo})
   		</if>
   		<if test="map.eventLevel != null and map.eventLevel !='' ">
   			AND A.EVENT_LEVEL = #{map.eventLevel}
   		</if>
   		<!--
   		<if test="map.queryDate != null and map.queryDate !='' ">
   			AND A.BG_ANALY_TIME = TO_DATE(#{map.queryDate},'yyyy-mm-dd')
   		</if>
   		-->
   		<if test="map.consNo != null and map.consNo !='' ">
   			AND A.CONS_NO LIKE '%${map.consNo}%'
   		</if>
   		<if test="map.terminalAddr != null and map.terminalAddr !='' ">
   			AND R.TERMINAL_ADDR LIKE '%${map.terminalAddr}%'
   		</if>
   	    <if test="map.assto_No != null and map.assto_No !='' ">
   			AND D.ASSET_NO like '%${map.assto_No}%'
   		</if>
  
  </select >
   <select id="getconstypeList" parameterType="string" resultType="hashmap">
  	    SELECT to_number(SEA.cons_type) cons_type ,SEA.cons_type_name FROM SEA.VW_CONS_TYPE SEA
  	      UNION  SELECT -1 AS CONS_TYPE,'--全部--' AS CONS_TYPE_NAME FROM  DUAL
  </select >
  <select id="queryBLPhaseInfo"  parameterType="string"  resultType="hashmap">
  		SELECT TO_CHAR(C.DATA_TIME, 'yyyy-mm-dd hh24:mi:ss') DATA_TIME,
		       C.UA,
		       C.UB,
		       C.UC,
		       C.IA,
		       C.IB,
		       C.IC,
		       C.P,
		       C.Q,
		       round(SQRT(C.P * C.P + C.Q * C.Q) * C.CT * C.PT,2) VIEWPOWER, ---视在功率
		       C.P * C.CT * C.PT FORWARDPOWER, ---正向有功总
		       C.Q * C.CT * C.PT REVERSEPOWER, ---反向有功总
		       C.F, ---功率因数
		       C.PAP_E,
		       C.RAP_E
		  FROM SEA_E_MP_CURVE
		  <if test="map.datePartition != null and map.datePartition !='' ">
          		${map.datePartition}
          </if> 
          C
		 WHERE TRUNC(C.DATA_TIME) = TO_DATE(#{map.dataTime},'yyyy-mm-dd')
		   AND C.ID = (SELECT E.ID
		                 FROM SEA_E_DATA_MP E
		                WHERE E.METER_ID = #{map.meterId}
		                  AND E.DATA_SRC = '1'
		                  AND E.IS_VALID = '1'
		                  AND ROWNUM = 1)
  </select >
  <select id="queryMeterEvent"  useCache="false" parameterType="string"  resultType="hashmap">
  
  SELECT A.ALARM_ID,
            A.ALARM_TYPE_CODE,
            A.METER_ID,
            A.EVENT_NO,
            A.EVENT_TYPE_CODE,
            A.TERMINAL_ID,
            A.EVENT_TIME,
            A.REC_TIME
            <if test="map.code==1">
		       ,
		       D.ASSET_NO,
		       D.TMNL_ASSET_NO,
		       VET.PROT_ITEM_NAME EVENT_NAME
		       </if>
		        <if test="map.code==0" >
		         	,VET.EVENT_NAME
		         </if>	
      FROM A_ALARM_METEVENT_RELA A
		    <if  test="map.code==1" >
		     , B_METER_PROTOCOL    VET , SEA_C_METER D
		     	 WHERE  A.EVENT_NO=VET.MET_PROTOCOL_NO	
		     	  AND A.EVENT_TYPE_CODE = #{map.eventTypeCode1}
		   </if>
		    <if  test="map.code==0" >
		     , b_tmnl_event_template    VET 
		     where VET.EVENT_NO=A.EVENT_NO
		     AND A.EVENT_TYPE_CODE = #{map.eventTypeCode}
		   </if>
		  	  
		  
		    <if  test="map.code==0" >
		   AND  A.TERMINAL_ID=#{map.terminalId}
		    </if>
		   <if  test="map.code==1" >
		 	 AND A.METER_ID = D.METER_ID(+)	
		     AND A.METER_ID= #{map.meterId}
		   </if>
  </select >
  <select id="queryeMpDayRead"  parameterType="string"  resultType="hashmap">
		  SELECT TO_CHAR(E.DATA_DATE,'yyyy-mm-dd') DATA_DATE,
		       E.PAP_R,   --正向有功总能示值 
		  (CASE
             WHEN E.PAP_R2 IS NULL AND E.PAP_R4 IS NULL THEN (SELECT E.PAP_R-
               (CASE WHEN E.PAP_R1 IS NULL THEN 0 ELSE E.PAP_R1 END )-
                (CASE WHEN e.pap_r3 IS NULL THEN 0 ELSE e.pap_r3 END) FROM DUAL)
           WHEN E.PAP_R4 IS NULL AND E.PAP_R3 IS NULL THEN (SELECT E.PAP_R-
               (CASE WHEN e.pap_r1 IS NULL THEN 0 ELSE e.pap_r1 END )-
               (CASE WHEN e.pap_r2 IS NULL THEN 0 ELSE e.pap_r2 END) FROM DUAL)   
                WHEN E.PAP_R1 IS NULL THEN (SELECT E.PAP_R-
               (CASE WHEN E.PAP_R2 IS NULL THEN 0 ELSE E.PAP_R2 END)-
               (CASE WHEN E.PAP_R3 IS NULL THEN 0 ELSE E.PAP_R3 END)-
               (CASE WHEN E.PAP_R4 IS NULL THEN 0 ELSE E.PAP_R4 END) FROM DUAL)
             WHEN E.PAP_R2 IS NULL THEN (SELECT E.PAP_R-
              (CASE WHEN e.pap_r1 IS NULL THEN 0 ELSE e.pap_r1 END)-
               (CASE WHEN E.PAP_R3 IS NULL THEN 0 ELSE E.PAP_R3 END)-
               (CASE WHEN E.PAP_R4 IS NULL THEN 0 ELSE E.PAP_R4 END) FROM DUAL)
             WHEN E.PAP_R3 IS NULL THEN (SELECT E.PAP_R-
                (CASE WHEN e.pap_r1 IS NULL THEN 0 ELSE e.pap_r1 END)-
               (CASE WHEN E.PAP_R2 IS NULL THEN 0 ELSE E.PAP_R2 END)-
               (CASE WHEN E.PAP_R4 IS NULL THEN 0 ELSE E.PAP_R4 END) FROM DUAL)
             WHEN E.PAP_R4 IS NULL THEN (SELECT E.PAP_R-
               (CASE WHEN e.pap_r1 IS NULL THEN 0 ELSE e.pap_r1 END)-
               (CASE WHEN E.PAP_R2 IS NULL THEN 0 ELSE E.PAP_R2 END)-
               (CASE WHEN E.PAP_R3 IS NULL THEN 0 ELSE E.PAP_R3 END) FROM DUAL)                
             ELSE 
               (SELECT E.PAP_R-E.PAP_R1-E.PAP_R2-e.PAP_R3-E.PAP_R4 FROM dual)
             END) pap,
		       E.PAP_R1,
		       E.PAP_R2,
		       E.PAP_R3,
		       E.PAP_R4,
		       E.RAP_R,   --反向有功总能量示值 
		          (CASE
             WHEN E.RAP_R2 IS NULL AND E.RAP_R4 IS NULL THEN (SELECT E.RAP_R-
               (CASE WHEN E.RAP_R1 IS NULL THEN 0 ELSE E.RAP_R1 END )-
                (CASE WHEN e.RAP_R3 IS NULL THEN 0 ELSE e.RAP_R3 END) FROM DUAL)
           WHEN E.RAP_R4 IS NULL AND E.RAP_R3 IS NULL THEN (SELECT E.RAP_R-
               (CASE WHEN e.RAP_R1 IS NULL THEN 0 ELSE e.RAP_R1 END )-
               (CASE WHEN e.RAP_R2 IS NULL THEN 0 ELSE e.RAP_R2 END) FROM DUAL)   
                WHEN E.RAP_R1 IS NULL THEN (SELECT E.RAP_R-
               (CASE WHEN E.RAP_R2 IS NULL THEN 0 ELSE E.RAP_R2 END)-
               (CASE WHEN E.RAP_R3 IS NULL THEN 0 ELSE E.RAP_R3 END)-
               (CASE WHEN E.RAP_R4 IS NULL THEN 0 ELSE E.RAP_R4 END) FROM DUAL)
             WHEN E.RAP_R2 IS NULL THEN (SELECT E.RAP_R-
              (CASE WHEN e.RAP_R1 IS NULL THEN 0 ELSE e.RAP_R1 END)-
               (CASE WHEN E.RAP_R3 IS NULL THEN 0 ELSE E.RAP_R3 END)-
               (CASE WHEN E.RAP_R4 IS NULL THEN 0 ELSE E.RAP_R4 END) FROM DUAL)
             WHEN E.RAP_R3 IS NULL THEN (SELECT E.RAP_R-
                (CASE WHEN e.RAP_R1 IS NULL THEN 0 ELSE e.RAP_R1 END)-
               (CASE WHEN E.RAP_R2 IS NULL THEN 0 ELSE E.RAP_R2 END)-
               (CASE WHEN E.RAP_R4 IS NULL THEN 0 ELSE E.RAP_R4 END) FROM DUAL)
             WHEN E.RAP_R4 IS NULL THEN (SELECT E.RAP_R-
               (CASE WHEN e.RAP_R1 IS NULL THEN 0 ELSE e.RAP_R1 END)-
               (CASE WHEN E.RAP_R2 IS NULL THEN 0 ELSE E.RAP_R2 END)-
               (CASE WHEN E.RAP_R3 IS NULL THEN 0 ELSE E.RAP_R3 END) FROM DUAL)                
             ELSE 
               (SELECT E.RAP_R-E.RAP_R1-E.RAP_R2-e.RAP_R3-E.RAP_R4 FROM dual)
             END) rap,
		       E.RAP_R1,  
		       E.RAP_R2,
		       E.RAP_R3,
		       E.RAP_R4,
		       E.PRP_R,     --正向无功总能示值
		       E.RRP_R 		--反向无功总能示值 
		  FROM SEA_E_MP_DAY_READ E
		<if test="map.dataTime1 !=''">
		  	 WHERE E.DATA_DATE BETWEEN TO_DATE(#{map.dataTime1}, 'yyyy-mm-dd') AND
		       TO_DATE(#{map.dataTime2}, 'yyyy-mm-dd')
		</if>
		<if test="map.dataTime1 ==''">
		        WHERE E.DATA_DATE BETWEEN TO_DATE(#{map.dataTime}, 'yyyy-mm-dd') - 29 AND
		       TO_DATE(#{map.dataTime}, 'yyyy-mm-dd')
		</if>
  	          AND E.ID = (SELECT EE.ID
		                 FROM SEA_E_DATA_MP EE
		                WHERE EE.METER_ID = #{map.meterId}
		     <if test="map.terminal_addr !=null and map.terminal_addr !=''">
		     	AND ee.terminal_addr=#{map.terminal_addr}
		     </if>
		                 AND EE.DATA_SRC in('1','3')
		                  AND EE.IS_VALID = '1'
		                  AND ROWNUM = 1)
		    ORDER BY E.DATA_DATE DESC              
  </select >
  <select id="queryaCalcDayPower"  parameterType="string"  resultType="hashmap">
	SELECT
        TO_CHAR(E.STAT_DATE,
        'yyyy-mm-dd') STAT_DATE,
        E.PAP_E,
        E.PAP_R_S,
        E.PAP_R_E     
    FROM
        SEA_A_CALC_DAY_POWER E      
     <if test="map.dataTime1 =='14'">   
    WHERE
        E.STAT_DATE BETWEEN TO_DATE(#{map.dataTime}, 'yyyy-mm-dd') - 29 AND TO_DATE(#{map.dataTime}, 'yyyy-mm-dd')
     </if>
      <if test="map.dataTime1 !='14'">   
    WHERE
        E.STAT_DATE BETWEEN TO_DATE(#{map.dataTime}, 'yyyy-mm-dd') -6 AND TO_DATE(#{map.dataTime}, 'yyyy-mm-dd')
     </if>
        AND (E.ID,E.ORG_NO,E.Cons_No) IN (
            SELECT
                EE.ID,EE.ORG_NO,EE.Cons_No                    
            FROM
                SEA_E_DATA_MP EE                   
            WHERE
                EE.METER_ID =#{map.meterId}                   
                AND EE.DATA_SRC in('1','3')                    
                AND EE.IS_VALID = '1'                     
                AND ROWNUM = 1
        )       
    ORDER BY
        E.STAT_DATE DESC
  </select >
  <select id="queryMeterEventDetail"  parameterType="string"  resultType="hashmap">
  SELECT DISTINCT
     <if test="map.namecode=='two'">PI.EVENT_DESC,</if>
     <if test="map.namecode=='one'"> dd.item_name,</if>
      aa.event_data
   FROM A_ALARM_METEVENT_RELA MR,
        <if test="map.namecode=='one'">SEA_B_EVENT_DATA_DEF  DD,</if>
        <if test="map.namecode=='two'">B_METER_PROTOCOL_ITEM PI,</if>
        <if test="map.namecode=='one'">B_TMNL_EVENT_TEMPLATE ET,</if>
       A_ALARM_EVENT_DETAIL  aa
  WHERE  
       <if test="map.namecode=='one'">MR.EVENT_NO = ET.EVENT_NO</if>
        <if test="map.namecode=='two'">MR.EVENT_NO = PI.MET_PROTOCOL_NO</if>
       <if test="map.namecode=='one'">AND DD.EVENT_NO = ET.COLL_EVENT_CODE</if>
     <if test="map.namecode=='two'">and MR.EVENT_NO = PI.MET_PROTOCOL_NO</if>
     AND aa.alarm_id=mr.alarm_id
     <if test="map.namecode=='two'">AND PI.ITEM_SN = AA.ITEM_NO</if>
     <if test="map.namecode=='one'">AND substr(aa.item_no,5)=dd.datan</if>
     AND mr.alarm_id=#{map.alarmid}
  </select >
  <select id="queryTablePartiTion"  parameterType="string"  resultType="string">
		  SELECT GET_PARTITION2(#{map.tableName}, TO_DATE(#{map.queryDate}, #{map.dateFormat}))
		  FROM DUAL
  </select >
  <select id= "queryEleMeterEventRec"  parameterType="string"  resultType="hashmap">

 SELECT A.MET_EVENT_ID,
          A.METER_ID,
          A.EVENT_NO,
          A.EVENT_TIME,
          A.REC_TIME,
          b.prot_item_name
         FROM E_MET_EVENT A, b_meter_protocol b
    WHERE A.EVENT_NO = b.met_protocol_no
      AND a.METER_ID =#{map.meterId}
      AND TRUNC(A.EVENT_TIME) BETWEEN TO_DATE(#{map.startDate}, 'yyyy-mm-dd') AND
          TO_DATE(#{map.endDate}, 'yyyy-mm-dd')

  </select >
  <select id= "queryMeterEventRecDetail"  parameterType="string"  resultType="hashmap">
  	SELECT MR.METER_ID,
       MR.EVENT_TIME,
       MR.REC_TIME,
       MR.EVENT_TYPE_CODE,
       MR.COMM_MESSAGE,
       mr.event_no
     FROM A_ALARM_METEVENT_RELA MR
   WHERE  MR.EVENT_TYPE_CODE = '02'
     AND METER_ID =#{map.meter_id}

  </select >	
  
  <select id="queryEleAbnormalTotalList" useCache="false"  parameterType="string"  resultType="hashmap">
  select aa.alarm_code, decode(aa.alarm_code,'','合计',b.event_name) event_name, aa.cnt
    from (SELECT a.alarm_code, count(*) cnt
          FROM a_alarm_analyse a,SEA_C_CONS CC,SEA.VW_CONS_TYPE SEA
          <if test="map.assto_No != null and map.assto_No !='' ">
          ,sea_e_data_mp edm
          </if>
          <if test="map.terminalAddr != null and map.terminalAddr !='' ">
              ,SEA.R_TMNL_RUN    R
          </if>
          where a.org_no IN
  	        (SELECT ORG_NO
		           FROM SEA_O_ORG
		         CONNECT BY PRIOR ORG_NO = P_ORG_NO
		          START WITH ORG_NO = #{map.orgNo})
           AND a.cons_no=cc.cons_no(+)
           AND cc.cons_type=sea.cons_type(+)
           <if test="map.assto_No != null and map.assto_No !='' ">
           AND a.meter_id=edm.meter_id
           </if>
           <if test="map.terminalAddr != null and map.terminalAddr !='' ">
           AND a.terminal_id=r.terminal_id(+)
           </if>
           and a.alarm_type = #{map.alarmType}
           AND A.EVENT_LEVEL = #{map.eventLevel}
           AND A.FLOW_STATUS_CODE = #{map.flowStatusCode}
           <if test="map.consType!='' and map.consType!='-1'">
           AND sea.cons_type=#{map.consType}
           </if>
        <if test="map.consNo != null and map.consNo !='' ">
   			AND A.CONS_NO LIKE '%${map.consNo}%'
   		</if>
   		<if test="map.terminalAddr != null and map.terminalAddr !='' ">
   			AND R.TERMINAL_ADDR LIKE '%${map.terminalAddr}%'
   		</if>
   		<if test="map.assto_No != null and map.assto_No !='' ">
   			AND edm.asset_no LIKE '%${map.assto_No}%'
   		</if>
         group by cube(a.alarm_code)) aa , vw_sea_alarm_code b
	 where aa.alarm_code = b.event_no(+)
	 ORDER BY aa.alarm_code    
  </select>
  <select id="empMeterClockInfo" parameterType="string"  resultType="hashmap">
   SELECT EMP.*, (EMP.DATA_TIME) DATACLOCK
   FROM SEA_E_DATA_MP E, SEA_E_MP_METER_CLOCK EMP, A_ALARM_ANALYSE AA
  WHERE EMP.ID = E.ID
    AND E.METER_ID = AA.METER_ID
    AND E.METER_ID = TO_CHAR(#{map.meterId})
</select>
  <select id="queryFileTotalList" resultType="hashmap">
SELECT A.CONS_NO,
       A.CONS_NAME,
       A.VOLT_CODE VOLT,
       A.ELEC_ADDR,
       A.RUN_CAP,
       A.CONTRACT_CAP,
       A.CONS_SORT_NAME,
       A.TRADE_NAME,
       A.ELEC_TYPE,
       A1.TMNL_ASSET_NO,
       A1.TERMINAL_ADDR,
       A1.STATUS_NAME,
       A1.PROTOCOL_NAME,
       A1.TMNL_TYPE,
       A1.COLL_MODE_NAME,
       A1.FACTORY_NAME,
       A1.CP_NO,
       A1.CP_ADDR,
       A1.CP_TYPE,
       A2.meas,
       A2.wiring,
       A2.ASSET_NO,
       A2.T_FACTOR,
       A2.COMM_MODE,
       A2.MP_ID,
       A2.MP_ATTR_NAME,
       A2.USAGE_TYPE_NAME,
       A2.VOLT_CODE,
       A2.MEAS_MODE,
       A2.CT,
       A2.PT,
       A2.WIRING_MODE_NAME
  FROM (SELECT C.CONS_NO,
               C.CONS_NAME,
               C.VOLT_CODE,
               VVC.VOLT,
               C.ELEC_ADDR,
               C.RUN_CAP,
               C.CONTRACT_CAP,
               VS.CONS_SORT_NAME,
               C.TRADE_CODE,
               T.TRADE_NAME,
               C.ELEC_TYPE_CODE,
               ET.ELEC_TYPE
          FROM SEA_C_CONS            C,
               SEA_VW_TRADE          T,
               SEA_VW_ELEC_TYPE_CODE ET,
               SEA_VW_VOLT_CODE      VVC,
               SEA_VW_CONS_SORT_CODE VS
         WHERE C.TRADE_CODE = T.TRADE_NO(+)
           AND VVC.VOLT_CODE (+)= C.VOLT_CODE
           AND C.ELEC_TYPE_CODE = ET.ELEC_TYPE_CODE(+)
           AND C.CONS_SORT_CODE = VS.CONS_SORT_CODE
           AND C.CONS_NO =#{map.consNo}) A,
       (SELECT R.TMNL_ASSET_NO,
               R.TERMINAL_ADDR,
               R.STATUS_CODE,
               S.STATUS_NAME,
               R.PROTOCOL_CODE,
               P.PROTOCOL_NAME,
               R.TERMINAL_TYPE_CODE,
               T.TMNL_TYPE,
               R.COLL_MODE,
               C.COLL_MODE COLL_MODE_NAME,
               R.FACTORY_CODE,
               F.FACTORY_NAME,
               RCP.CP_NO,
               RCP.CP_ADDR,
               RCPT.CP_TYPE
          FROM SEA_R_TMNL_RUN         R,
               SEA_R_CP               RCP,
               SEA.VW_CP_TYPE_CODE    RCPT,
               SEA_VW_TMNL_STATUS_RUN S,
               VW_PROTOCOL_CODE       P,
               SEA_VW_TMNL_TYPE_CODE  T,
               VW_COLL_MODE           C,
               SEA_VW_TMNL_FACTORY    F
         WHERE R.STATUS_CODE = S.STATUS_CODE(+)
           AND R.CP_NO = RCP.CP_NO(+)
           AND RCP.CP_TYPE_CODE=RCPT.CP_TYPE_CODE(+)
           AND R.PROTOCOL_CODE = P.PROTOCOL_CODE(+)
           AND R.TERMINAL_TYPE_CODE = T.TMNL_TYPE_CODE(+)
           AND R.COLL_MODE = C.COLL_MODE_CODE(+)
           AND R.FACTORY_CODE = F.FACTORY_CODE(+)
           AND R.TERMINAL_ADDR =#{map.termimalAddr}) A1,
       (SELECT C.ASSET_NO,
               C.T_FACTOR,
               EDM.CT,
               EDM.PT,
               V.PROTOCOL_NAME COMM_MODE,
               D.MP_ID,
               D.MP_ATTR_NAME,
               D.USAGE_TYPE_NAME,
               d.meas,
               d.wiring,
               D.VOLT_CODE,
               D.MEAS_MODE,
               D.WIRING_MODE_NAME
          FROM SEA_C_METER C,SEA_VW_MET_COMM_PROTOCOL V,(SELECT DISTINCT METER_ID,CT,PT FROM SEA_E_DATA_MP E WHERE E.METER_ID=#{map.meterId}) EDM,
               (SELECT CM.MP_ID,
                       MA.MP_ATTR_NAME,
                       UT.USAGE_TYPE_NAME,
                       CM.VOLT_CODE,
                       cm.meas_mode meas,
                       cm.wiring_mode wiring,
                       MM.MEAS_MODE,
                       WM.WIRING_MODE_NAME
                  FROM SEA_C_MP             CM,
                       SEA_VW_MP_ATTR       MA,
                       SEA_VW_MP_USAGE_TYPE UT,
                       SEA_VW_MEAS_MODE     MM,
                       SEA_VW_WIRING_MODE WM
                 WHERE CM.MP_ATTR_CODE = MA.MP_ATTR_CODE(+)
                   AND CM.USAGE_TYPE_CODE = UT.USAGE_TYPE_CODE(+)
                   AND CM.WIRING_MODE=WM.WIRING_MODE(+)
                   AND CM.MEAS_MODE = MM.MEAS_NO(+)) D
         WHERE C.MP_ID = D.MP_ID(+)
           AND C.COMM_NO=V.PROTOCOL_CODE(+)
           AND C.METER_ID=EDM.METER_ID(+)
           AND C.METER_ID =#{map.meterId}) A2
  </select>
    <select id= "queryAlarmAnalyseHisInfo" useCache="false" parameterType="string"  resultType="hashmap">
  	     SELECT 
        DECODE(A.alarm_type,'01','计量异常','02','终端异常','') ALTYPE,
        A.ALARM_ID,
        DECODE(A.EVENT_LEVEL,'01','严重','02','重要','03','较重要','04','一般') EVENT_LEVEL,  
        VW.EVENT_NAME,
        A.CONS_NO,  
        A.ALARM_SRC,
        TO_CHAR(A.FIRST_ALARM_DATE,'yyyy-mm-dd') FIRST_ALARM_DATE,
        TO_CHAR(A.ALARM_DATE,'yyyy-mm-dd') ALARM_DATE,
        A.ALARM_CNT,
        TO_CHAR(A.FIRST_RESUME_DATE,'yyyy-mm-dd') FIRST_RESUME_DATE,
		    TO_CHAR(A.RESUME_DATE,'yyyy-mm-dd') RESUME_DATE,
		    A.RESUME_DAY_CNT,
		    A.METER_ASSET_NO,
        DECODE(A.FLOW_STATUS_CODE,'0','持续关注','1','新异常','2','本地处理中','3','营销处理中','4','误报','5','已归档') FLOWCODE,
       A.FLOW_STATUS_DETAIL,
       A.FLOW_FLAG,
       A.SEND_ORG_NO,
       A.SEND_STAFF_NO,
       A.SEND_DATE,
       A.HANDLE_ORG_NO,
       A.HANDLE_STAFF_NO,
       A.HANDLE_DATE
    FROM A_ALARM_ANALYSE_HIS   A, VW_SEA_ALARM_CODE VW
		 WHERE A.ALARM_CODE = VW.EVENT_NO(+)
   		 AND A.CONS_NO LIKE '%${map.consNo}%'
       AND A.FIRST_ALARM_DATE BETWEEN TO_DATE(#{map.staDatenjl}, 'yyyy-mm-dd') and TO_DATE(#{map.endDatenjl}, 'yyyy-mm-dd')
                  
  </select >	
  
    <select id="queryEleTmnlEventRec" useCache="false" parameterType="string"  resultType="hashmap"> 
				SELECT A.EVENT_NO,
				       V.EVENT_NAME,
				       B.TERMINAL_ADDR,
				       to_char(A.EVENT_TIME,'yyyy-mm-dd hh24:mi:ss') EVENT_TIME,
				       DECODE(A.FROM_TYPE,1,'测量点号',2,'总加组号',3,'电能量差动组号',4,'直流模拟端口号') EVENT_SRC,
				       A.FROM_NO,
				       DECODE(V.EVENT_LEVEL,0,'一般',1,'重要','其他')  EVENT_LEVEL,
					   A.DATA1,
					   A.DATA2,
					   A.DATA3,
					   A.DATA4,
					   A.DATA5,
					   A.DATA6
				  FROM (SELECT TE.ID, TE.EVENT_NO, TE.EVENT_TIME, TE.FROM_NO, TE.FROM_TYPE,
                          TE.DATA1,  TE.DATA2, TE.DATA3,TE.DATA4,TE.DATA5,TE.DATA6
				          FROM SEA_E_TMNL_EVENT TE
				         WHERE TE.AREA_CODE =  #{map.areaCode}
				           AND TRUNC(TE.EVENT_TIME) BETWEEN
				               TO_DATE( #{map.startDate}, 'YYYY-MM-DD') AND
				               TO_DATE( #{map.endDate}, 'YYYY-MM-DD')) A,
				       (SELECT E.ID, E.CONS_NO, E.TERMINAL_ADDR
				          FROM SEA_E_DATA_MP E
				         WHERE E.AREA_CODE = #{map.areaCode}
				           AND E.TMNL_ASSET_NO = #{map.terminalId}) B,
				       B_TMNL_EVENT_TEMPLATE V
				 WHERE A.ID = B.ID
				   AND V.COLL_EVENT_CODE(+) = A.EVENT_NO  	
  	
  </select >
</mapper>